import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { UpdateQuestionnaireDto, UpdateTrameDto } from './dto/update-formulaire.dto';
import { Model } from 'mongoose';
import { CreateQuestionnaireExploitationDto, CreateTrameExploitationDto, DiffusionDto } from './dto/create-formulaire.dto';
import { MailerService } from '@nestjs-modules/mailer';
import { info } from 'console';

@Injectable()
export class FormulaireExploitationService {
  EmailSeneder = "ITF@info.com";
  constructor(
    @InjectModel('trameExploitation') private trameExploitation: Model<0>,
    @InjectModel('questionnaireExploitation') private questionnaireExploitation: Model<0>,
    private mailerService: MailerService,
    ) {}



    async onSendEmail( destinatair, titre, code) { 
      this.mailerService
        .sendMail({
          to: destinatair, // list of receivers
          from: this.EmailSeneder, // sender address
          subject: "Diffusion de la trame", // Subject line
          text: 'Envoie des email', // plaintext body
          html: "message", // HTML body content
          //template: "wellcome"
          //html:  'Votre mot de passe a été mis à jour.  Si vous n\'êtes pas l\'auteur de cette demande, veuillez nous contacter  :<br/> <a href="http://www.dev.defifreelance.fr/contact" target="_blank">Contactez Défifreelance</a> <br/><br/><img height="80" src="https://defifreelance-admin.defifreelance.fr/assets/imgs/LogoRouge.png" alt="mailtrap" />',
        })
        .then(() => {
          console.log('Email envoyé avec succès.');
        })
        .catch((err) => {
          console.log('Email Erreur 403 = ' + err);
        });
    }


  async onCreateTrame(createTrameDto: CreateTrameExploitationDto) {
    let trameCreated = await this.trameExploitation.create(createTrameDto);
    // console.log("opération deroulée avec succès");
    // console.log(JSON.stringify(createFormulaireDto.formulaire));
    return {statut: true , message: "trame de Exploitation enregistrée avec succès."};
  }

  async onGetAllTrame() {
    var data = await this.trameExploitation.find().sort({date: -1}).exec();
    return {"statut": true, "data": data};
  }

  onGetOneTrame(id: string) {
    return `This action returns a #${id} formulaire`;
  }
 
  async onGetCategorieTrame(domaine: any) {
    const data = await this.trameExploitation.find().where({ domaine: domaine }).sort({date: -1}).exec();
    return {"statut": true, "data": data};
  }
 

  async onUpdateTrame(_id: string, updateTrameDto: UpdateTrameDto) {
    let modification = await this.trameExploitation.findByIdAndUpdate(_id, 
      {formulaire : updateTrameDto.formulaire, titre: updateTrameDto.titre, domaine: updateTrameDto.domaine, date: updateTrameDto.date },
      {upsert:true, new:true}).exec();
    return {"statut": true, "message": "Opération de mise a jout éffectué avec succès."};
  } 

  async onDeleteTrame(_id) {
    await this.trameExploitation.findByIdAndDelete(_id);
    return {"statut": true, "message": "Opération de suppression éffectué avec succès."};
  }


  /////////////////////////////    Exploitation DES QUESTIONNAIRES  ////////////////////

  
  async onCreateQuestionnaire(createFormulaireDto: CreateQuestionnaireExploitationDto) {
    let QuestionnaireCreated = await this.questionnaireExploitation.create(createFormulaireDto);
    // console.log("opération deroulée avec succès");
    // console.log(JSON.stringify(createFormulaireDto.formulaire));
    return {statut: true , message: "Questionnaire de Exploitation enregistrée avec succès."};
  }

  async onGetAllQuestionnaire() {
    var data = await this.questionnaireExploitation.find().sort({date: -1}).exec();
    return {"statut": true, "data": data};
  }



  onGetOneQuestionnaire(id) { 
    return `This action returns a #${id} formulaire`;
  }
 

  async onUpdateQuestionnaire(_id, updateQuestionnaireDto: UpdateQuestionnaireDto) {
    console.log("Modifiction du QUESTIONNAIRE+++++")
    let modification = await this.questionnaireExploitation.findByIdAndUpdate(_id, 
      {formulaire : updateQuestionnaireDto.formulaire, titre: updateQuestionnaireDto.titre,
         categorieQuestionnaire: updateQuestionnaireDto.categorieQuestionnaire,
         periodicite: updateQuestionnaireDto.periodicite,
         delaisAlerte: updateQuestionnaireDto.delaisAlerte,
         formation: updateQuestionnaireDto.formation,
         habilitation: updateQuestionnaireDto.habilitation,
         date: updateQuestionnaireDto.date },
      {upsert:true, new:true}).exec();
    return {"statut": true, "message": "Opération de mise a jout éffectué avec succès."};
  } 

  async onDeleteQuestionnaire(_id) {
    await this.questionnaireExploitation.findByIdAndDelete(_id);
    return {"statut": true, "message": "Opération de suppression éffectué avec succès."};
  }



  ////////////////////////////////////////////////

  async onGetFormulaireById(id: any) {
    let data
       data = await this.trameExploitation.findById(id).exec();
    if(! data){
       data = await this.questionnaireExploitation.findById(id).exec();
    }
    if(! data) return {"statut": false, "data": {}}
    return {"statut": true, "data": data};
  }


  async onDiffusionTrame(diffusion: DiffusionDto) {
    console.log(diffusion)
    await  this.mailerService
        .sendMail({
          to: diffusion.email, // list of receivers
          from: this.EmailSeneder, // sender address
          subject: "Diffusion de la trame", // Subject line
          text: 'Envoie des email', // plaintext body
          html: diffusion.titre + "<br/> <br/>Voici votre code d'accès: " + diffusion.code + "<br/><br/>Lien du document:  <a href='https://trading-df457.firebaseapp.com/#/interface_partage_electronique_document' target='_blank'>Accèder au document Diffusé...</a>", // HTML body content
          //template: "wellcome"
          //html:  'Votre mot de passe a été mis à jour.  Si vous n\'êtes pas l\'auteur de cette demande, veuillez nous contacter  :<br/> <a href="http://www.dev.defifreelance.fr/contact" target="_blank">Contactez Défifreelance</a> <br/><br/><img height="80" src="https://defifreelance-admin.defifreelance.fr/assets/imgs/LogoRouge.png" alt="mailtrap" />',
        })
        .then(() => {
          console.log('Email envoyé avec succès.');
        })
        .catch((err) => {
          console.log('Email Erreur 403 = ' + err);
        });
    return {statut: true , message: "Questionnaire de Exploitation enregistrée avec succès."};
  }



}





